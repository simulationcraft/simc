name: CI

on:
  pull_request:
    branches: [ shadowlands ]
  push:
    branches: [ shadowlands ]
    paths-ignore:
      - 'SpellDataDump/**'
      - 'dbc_extract3/**'
      - 'casc_extract/**'

env:
  SIMC_PROFILE: profiles/CI.simc
  CCACHE_COMPRESS: true # always enable ccache compression
  ccache-generation: 0 # bump if you need to "clean" ccache

jobs:
  ubuntu-gcc:
    name: ubuntu-${{ matrix.cc }}
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        cc: [gcc-9, gcc-6]
        include:
          - cc: gcc-6
            cxx: g++-6
            packages: gcc-6 g++-6
          - cc: gcc-9
            cxx: g++-9
            packages: gcc-9 g++-9

    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        env: { ccache-prefix: 'ubuntu-${{ matrix.cc }}-ccache-${{ env.ccache-generation }}' }
        with:
          path: ${{ runner.workspace }}/.ccache
          key: ${{ env.ccache-prefix }}-${{ github.sha }}
          restore-keys: ${{ env.ccache-prefix }}-

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev ninja-build lld ccache ${{ matrix.packages }}

      - name: Configure
        run: cmake -H. -B'${{ runner.workspace }}/b/ninja' -GNinja -DBUILD_GUI=OFF
              -DCMAKE_BUILD_TYPE=Debug
              -DCMAKE_CXX_COMPILER=${{ matrix.cxx }} -DCMAKE_C_COMPILER=${{ matrix.cc }}
              -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld"
              -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

      - name: Build
        env:
          CCACHE_BASEDIR: ${{ runner.workspace }}
          CCACHE_DIR: ${{ runner.workspace }}/.ccache
          CCACHE_MAXSIZE: 192M # full build consumes around ~80, ~2x that to be safe
        run: |
          ccache -z
          ninja -C '${{ runner.workspace }}/b/ninja'
          ccache -s

      - name: Smoke Test
        run: ${{ runner.workspace }}/b/ninja/simc $SIMC_PROFILE iterations=20
              output=/dev/null html=/dev/null json2=/dev/null

      - name: Spell Query
        run: ${{ runner.workspace }}/b/ninja/simc spell_query=spell.name=auto_shot


  ubuntu-clang-10-build:
    name: ubuntu-clang-10-build
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        env: { ccache-prefix: 'ubuntu-clang-10-ccache-${{ env.ccache-generation }}' }
        with:
          path: ${{ runner.workspace }}/.ccache
          key: ${{ env.ccache-prefix }}-${{ github.sha }}
          restore-keys: ${{ env.ccache-prefix }}-

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev ninja-build ccache

      - name: Configure
        env:
          UBSAN_STRIP_COUNT: "`echo \"${{ runner.workspace }}//\" | grep -o '/' - | wc -l`"
        run: cmake -H. -B'${{ runner.workspace }}/b/ninja' -GNinja -DBUILD_GUI=OFF
              -DCMAKE_BUILD_TYPE=Debug
              -DCMAKE_CXX_COMPILER=clang++-10 -DCMAKE_C_COMPILER=clang-10
              -DCMAKE_CXX_FLAGS="-Og -ffile-prefix-map=${{ runner.workspace }}/=/
                -fno-omit-frame-pointer -fsanitize=address,undefined
                -fsanitize-undefined-strip-path-components=$UBSAN_STRIP_COUNT"
              -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld -fsanitize=address,undefined"
              -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

      - name: Build
        env:
          CCACHE_BASEDIR: ${{ runner.workspace }}
          CCACHE_DIR: ${{ runner.workspace }}/.ccache
          CCACHE_MAXSIZE: 256M # full build consumes around ~124, ~2x that to be safe
        run: |
          ccache -z
          ninja -C '${{ runner.workspace }}/b/ninja'
          ccache -s

      - uses: actions/cache@v2
        with:
          path: |
            ${{ runner.workspace }}/b/ninja/simc
            profiles
            tests
          key: ubuntu-clang-10-for_run-${{ github.sha }}


  ubuntu-clang-10-run:
    name: ubuntu-clang-10-${{ matrix.type }}
    runs-on: ubuntu-20.04
    needs: [ ubuntu-clang-10-build ]

    strategy:
      fail-fast: false
      matrix:
        include:
          - type: spell_query
            simc_flags: spell_query=spell > /dev/null
          - type: log_debug
            simc_flags: $SIMC_PROFILE log=1 debug=1 max_time=100
          - type: patchwerk
            simc_flags: $SIMC_PROFILE iterations=10 cleanup_threads=1
          - type: dungeon_slice
            simc_flags: $SIMC_PROFILE iterations=10 fight_style=DungeonSlice cleanup_threads=1

    steps:
      - uses: actions/cache@v2
        with:
          path: |
            ${{ runner.workspace }}/b/ninja/simc
            profiles
            tests
          key: ubuntu-clang-10-for_run-${{ github.sha }}

      - name: Run
        env:
          UBSAN_OPTIONS: print_stacktrace=1
        run: ${{ runner.workspace }}/b/ninja/simc output=/dev/null html=/dev/null json2=/dev/null json3=/dev/null ${{ matrix.simc_flags }}

  simc-tests:
    name: test-${{ matrix.tier }}-${{ matrix.spec }}
    runs-on: ubuntu-20.04
    needs: [ ubuntu-clang-10-build ]

    strategy:
      fail-fast: false
      matrix:
        tier: [ PreRaids ]
        spec: [
            Death_Knight_Blood, Death_Knight_Frost, Death_Knight_Unholy,
            Demon_Hunter_Havoc, Demon_Hunter_Vengeance,
            Druid_Balance, Druid_Feral, Druid_Guardian,
            Hunter_Beast_Mastery, Hunter_Marksmanship, Hunter_Survival,
            Mage_Arcane, Mage_Fire, Mage_Frost,
            Monk_Brewmaster, Monk_Windwalker,
            Paladin_Holy, Paladin_Protection, Paladin_Retribution,
            Priest_Discipline, Priest_Shadow,
            Rogue_Assassination, Rogue_Outlaw, Rogue_Subtlety,
            Shaman_Elemental, Shaman_Enhancement, Shaman_Restoration,
            Warlock_Affliction, Warlock_Demonology, Warlock_Destruction,
            Warrior_Arms, Warrior_Fury, Warrior_Protection,
          ]

    steps:
      - uses: actions/cache@v2
        with:
          path: |
            ${{ runner.workspace }}/b/ninja/simc
            profiles
            tests
          key: ubuntu-clang-10-for_run-${{ github.sha }}

      - name: Install Python dependencies
        run: pip3 install -r tests/requirements.txt

      - name: Run
        env:
          UBSAN_OPTIONS: print_stacktrace=1
          SIMC_CLI_PATH: ${{ runner.workspace }}/b/ninja/simc
          SIMC_PROFILE_DIR: ${{ github.workspace }}/profiles/${{ matrix.tier }}
          SIMC_THREADS: 2
          SIMC_ITERATIONS: 2
        run: tests/run.py ${{ matrix.spec }} -tests talent trinket covenant legendary soulbind --max-profiles-to-use 1

  build-osx:
    name: macos-latest
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2

      - name: Build
        run: make SANITIZE=1 -C engine debug -j 2

      - name: Smoke Test
        run: ./engine/simc $SIMC_PROFILE iterations=5 output=/dev/null html=/dev/null json2=/dev/null cleanup_threads=1

  windows-VS:
    name: windows-VS-${{ matrix.vs }}
    runs-on: windows-latest
    strategy:
      matrix:
        vs: [2017, 2019]
        include:
          - vs: 2017
            platform: x64
            configuration: Debug-WebEngine
            projectFile: vs/simc_vs2017.vcxproj
            executable: vs\x64\Debug-WebEngine\simc.exe
            runSmokeTest: false
          - vs: 2019
            platform: x64
            configuration: Debug-NoNetworking
            projectFile: vs/simc_vs2019.vcxproj
            executable: vs\simc.exe
            runSmokeTest: true

    steps:
      - uses: actions/checkout@v2

      - uses: microsoft/setup-msbuild@v1.0.2

      - name: Build
        run: MSBuild.exe /maxcpucount /p:Configuration="${{ matrix.configuration }}" /p:Platform=${{ matrix.platform }} ${{ matrix.projectFile }}

      - name: Smoke Test
        if: ${{ matrix.runSmokeTest }}
        run: ${{ matrix.executable }} $env:SIMC_PROFILE iterations=5 output=nul html=nul json2=nul cleanup_threads=1
